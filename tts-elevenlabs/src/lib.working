mod client;

// use golem_tts::exports::golem::tts::advanced::Guest as AdvancedGuest;

// #[allow(unused_imports)]
// use golem_tts::exports::golem::tts::advanced::SynthesisMetadata;
// use golem_tts::exports::golem::tts::streaming::Guest as StreamingGuest;

#[allow(unused_imports)]
// use golem_tts::exports::golem::tts::synthesis::{AudioConfig, Guest as SynthesisGuest, TextInput};
use golem_tts::exports::golem::tts::types::LanguageCode;
use golem_tts::exports::golem::tts::voices::AudioFormat;
use golem_tts::exports::golem::tts::voices::{
    Guest as VoicesGuest, GuestVoice, GuestVoiceResults, LanguageInfo, TtsError, Voice,
    VoiceFilter, VoiceInfo, VoiceResults,
};

// use golem_tts::exports::golem::tts::voices::TtsError
// use golem_tts::golem::tts::types::TtsError;
//

struct ElevenLabsTtsComponent;

#[allow(dead_code)]
impl GuestVoice for ElevenLabsTtsComponent {
    fn get_id(&self) -> String {
        "id: ".to_string()
    }
    fn get_name(&self) -> String {
        "Voice Name: ".to_string()
    }

    fn get_provider_id(&self) -> Option<String> {
        "get provider id: ".to_string().into()
    }
    fn get_language(&self) -> LanguageCode {
        "US-English".to_string().parse().unwrap()
    }
    fn get_additional_languages(&self) -> Vec<LanguageCode> {
        vec!["US-English".to_string().parse().unwrap()]
    }

    fn get_gender(&self) -> golem_tts::golem::tts::types::VoiceGender {
        golem_tts::golem::tts::types::VoiceGender::Neutral
    }

    fn get_quality(&self) -> golem_tts::golem::tts::types::VoiceQuality {
        golem_tts::golem::tts::types::VoiceQuality::Standard
    }
    fn get_description(&self) -> Option<String> {
        Some("Voice Description".to_string())
    }
    fn supports_ssml(&self) -> bool {
        true
    }
    fn get_sample_rates(&self) -> Vec<u32> {
        vec![16000, 24000, 48000]
    }
    fn get_supported_formats(&self) -> Vec<AudioFormat> {
        vec![AudioFormat::Mp3, AudioFormat::Wav]
    }
    fn update_settings(
        &self,
        _settings: golem_tts::golem::tts::types::VoiceSettings,
    ) -> Result<(), TtsError> {
        Ok(())
    }
    fn delete(&self) -> Result<(), TtsError> {
        Ok(())
    }
    fn clone(
        &self,
    ) -> std::result::Result<
        golem_tts::golem::tts::voices::Voice,
        golem_tts::golem::tts::types::TtsError,
    > {
        todo!()
    }
    fn preview(
        &self,
        _: std::string::String,
    ) -> std::result::Result<std::vec::Vec<u8>, golem_tts::golem::tts::types::TtsError> {
        todo!()
    }
}

//
//
//
//
impl GuestVoiceResults for ElevenLabsTtsComponent {
    fn has_more(&self) -> bool {
        todo!()
    }

    fn get_next(&self) -> Result<Vec<VoiceInfo>, TtsError> {
        todo!()
    }

    fn get_total_count(&self) -> Option<u32> {
        todo!()
    }
}

impl VoicesGuest for ElevenLabsTtsComponent {
    type Voice = ElevenLabsTtsComponent;
    type VoiceResults = ElevenLabsTtsComponent;
    fn list_voices(_filter: Option<VoiceFilter>) -> Result<VoiceResults, TtsError> {
        todo!()
    }

    fn get_voice(_voice_id: String) -> Result<Voice, TtsError> {
        todo!()
    }

    fn search_voices(
        _query: String,
        _filter: Option<VoiceFilter>,
    ) -> Result<Vec<VoiceInfo>, TtsError> {
        todo!()
    }

    fn list_languages() -> Result<Vec<LanguageInfo>, TtsError> {
        todo!()
    }
}

// --- Export ---
golem_tts::export_tts!(ElevenLabsTtsComponent with_types_in golem_tts);
